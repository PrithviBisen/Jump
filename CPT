import arcade
import os

SPRITE_SCALING = 0.2
CRATE_SCALING = 0.25

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "GAME"

MOVEMENT_SPEED = 10
GRAVITY_CONSTANT = 1

player_loc = [0, 0]
keys_pressed = {
    arcade.key.UP: False,
    arcade.key.DOWN: False,
    arcade.key.LEFT: False,
    arcade.key.RIGHT: False
}

TEXTURE_LEFT = 0
TEXTURE_RIGHT = 1


class Player(arcade.Sprite):

    def __init__(self):
        super().__init__()

        texture = arcade.load_texture("/home/robuntu/Bisen/character.png", mirrored=True, scale=SPRITE_SCALING)
        self.textures.append(texture)
        texture = arcade.load_texture("/home/robuntu/Bisen/character.png", scale=SPRITE_SCALING)
        self.textures.append(texture)

        self.set_texture(TEXTURE_RIGHT)

    def update(self):
        self.center_x += self.change_x
        self.center_y += self.change_y
        self.change_y -= GRAVITY_CONSTANT

        if self.change_x < 0:
            self.set_texture(TEXTURE_LEFT)
        if self.change_x > 0:
            self.set_texture(TEXTURE_RIGHT)


        if self.left < 0:
            self.left = 0
        elif self.right > SCREEN_WIDTH - 1:
            self.right = SCREEN_WIDTH - 1

        if self.bottom < 100:
            self.bottom = 100
        elif self.top > SCREEN_HEIGHT - 1:
            self.top = SCREEN_HEIGHT - 1


class MyGame(arcade.Window):

    def __init__(self, width, height, title):

        super().__init__(width, height, title)

        file_path = os.path.dirname(os.path.abspath(__file__))
        os.chdir(file_path)

        self.player_list = None

        self.player_sprite = None

        arcade.set_background_color(arcade.color.BLACK)

    def setup(self):
        global SCREEN_HEIGHT
        global SCREEN_WIDTH
        self.player_list = arcade.SpriteList()
        self.wall_list = arcade.SpriteList()

        self.player_sprite = Player()

        wall = arcade.Sprite('/home/robuntu/Bisen/Crate.jpeg', CRATE_SCALING)

        wall.center_x = 200
        wall.center_y = 150
        self.wall_list.append(wall)
        self.player_sprite.center_x = 50
        self.player_sprite.center_y = 100
        self.player_list.append(self.player_sprite)
        arcade.set_viewport(-SCREEN_WIDTH / 2, SCREEN_WIDTH / 2, -SCREEN_HEIGHT / 2, SCREEN_HEIGHT / 2)

    def on_draw(self):


        arcade.start_render()
        arcade.draw_rectangle_filled(SCREEN_WIDTH/2,55,SCREEN_WIDTH,110,arcade.color.DARK_GREEN)

        self.player_list.draw()
        self.wall_list.draw()

    def update(self, delta_time):
        global MOVEMENT_SPEED

        if keys_pressed[arcade.key.RIGHT]:
            player_loc[0] += MOVEMENT_SPEED
        elif keys_pressed[arcade.key.LEFT]:
            player_loc[0] -= MOVEMENT_SPEED

        if keys_pressed[arcade.key.UP]:
            player_loc[1] += MOVEMENT_SPEED

        arcade.set_viewport(-SCREEN_WIDTH/2 + self.player_sprite.center_x,
                            SCREEN_WIDTH/2 + self.player_sprite.center_x,
                            -SCREEN_HEIGHT/2 + 300,
                            SCREEN_HEIGHT/2 + 300)

        self.player_list.update()
        self.wall_list.update()
        wall_hit_list = arcade.check_for_collision_with_list(self.player_sprite,self.wall_list)

        for wall in wall_hit_list:
            self.player_sprite.change_x = 0
            self.player_sprite.change_y = 0

    def on_key_press(self, key, modifiers):

        if self.player_sprite.center_y < 140  and key == arcade.key.UP:
            self.player_sprite.change_y = 20
        elif key == arcade.key.LEFT:
            self.player_sprite.change_x = -MOVEMENT_SPEED
        elif key == arcade.key.RIGHT:
            self.player_sprite.change_x = MOVEMENT_SPEED

    def on_key_release(self, key, modifiers):

        if key == arcade.key.UP or key == arcade.key.DOWN:
            self.player_sprite.change_y = 0
        elif key == arcade.key.LEFT or key == arcade.key.RIGHT:
            self.player_sprite.change_x = 0


def main():
    window = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    window.setup()
    arcade.run()


if __name__ == "__main__":
    main()
